import hashlib
import random
import time
from datetime import datetime

class Block:
    def __init__(self, previous_hash, data, username, timestamp):
        self.previous_hash = previous_hash
        self.data = data
        self.username = username
        self.timestamp = timestamp
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        sha = hashlib.sha256()
        sha.update(str(self.previous_hash).encode('utf-8') +
                   str(self.data).encode('utf-8') +
                   str(self.username).encode('utf-8') +
                   str(self.timestamp).encode('utf-8'))
        return sha.hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block("0", "Genesis Block", "", time.time())

    def add_block(self, new_block):
        new_block.previous_hash = self.chain[-1].hash
        self.chain.append(new_block)

    def generate_random_number(self, low_boundary, upper_boundary, username):
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
        seed = str(username) + str(timestamp)
        random.seed(seed)
        random_number = random.randint(low_boundary, upper_boundary)
        self.add_block(Block(self.chain[-1].hash, random_number, username, timestamp))
        return random_number, timestamp

    def print_blocks(self):
        for block in self.chain:
            print("Previous Hash: ", block.previous_hash)
            print("Data: ", block.data)
            print("Username: ", block.username)
            print("Timestamp: ", block.timestamp)
            print("Hash: ", block.hash)
            print()

    def print_blocks_by_username(self, username):
        blocks_found = False
        for block in self.chain:
            if block.username == username:
                blocks_found = True
                print("Previous Hash: ", block.previous_hash)
                print("Data: ", block.data)
                print("Username: ", block.username)
                print("Timestamp: ", block.timestamp)
                print("Hash: ", block.hash)
                print()

        if not blocks_found:
            print("No records found for the username in the blockchain")

# Main code
username = input("Enter your username: ")
blockchain = Blockchain()

while True:
    print("\nMenu:")
    print("1. Generate random number")
    print("2. List all generated blocks")
    print("3. List blocks by username")
    print("4. Exit")
    choice = input("Enter your choice: ")

    if choice == '1':
        low_boundary = int(input("Enter the lower boundary: "))
        upper_boundary = int(input("Enter the upper boundary: "))
        generated_number, timestamp = blockchain.generate_random_number(low_boundary, upper_boundary, username)
        print("Username:", username)
        print("Your generated number is:", generated_number)
        print("Timestamp:", timestamp)

    elif choice == '2':
        print("Blockchain blocks:")
        blockchain.print_blocks()

    elif choice == '3':
        target_username = input("Enter the username to list blocks: ")
        print("Blocks generated by username:")
        blockchain.print_blocks_by_username(target_username)

    elif choice == '4':
        break

    else:
        print("Invalid choice. Please try again.")